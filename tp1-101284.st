Object subclass: #AlgoVid	instanceVariableNames: 'listaDePersonas colegios burbujas'	classVariableNames: ''	package: 'tp1-101284'!!AlgoVid methodsFor: 'initialization' stamp: 'luciano 5/20/2021 23:51'!initialize 	listaDePersonas := ListaPersonas new.	colegios := ListaColegios new .	burbujas := ListaBurbujas new .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:57'!nuevaPersona: nombrePersona	|persona nombre|	persona := Persona new .	nombre := self traducirNombre: nombrePersona .	persona seLlama: nombre .	listaDePersonas agregar: persona .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:38'!traducirNombre: unaCadena	|nombre|	nombre := Nombre new .	nombre asignar: unaCadena .	^ nombre .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:52'!diagnosticoDe: nombrePersona	|nombre|	nombre := self traducirNombre: nombrePersona .	^ listaDePersonas estadoDe: nombre .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:57'!puedeCircular: nombrePersona	|persona nombre|	nombre := self traducirNombre: nombrePersona . 	persona := listaDePersonas hallar: nombre .	^ (persona puedeCircular) .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:56'!contactoEstrechoEntre: unaPersona y: otraPersona	|persona1 persona2 nombre1 nombre2|	nombre1 := self traducirNombre: unaPersona .	nombre2 := self traducirNombre: otraPersona .	persona1 := listaDePersonas hallar: nombre1 .	persona2 := listaDePersonas hallar: nombre2 .	persona1 seJuntoCon: persona2 .	persona2 seJuntoCon: persona1 .		! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:39'!burbujaPinchada: etiquetaDeBurbuja	|nombreBurbuja|	nombreBurbuja := self traducirNombre: etiquetaDeBurbuja .	^ (burbujas hallar: nombreBurbuja) exploto .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:56'!esPersonaDeRiesgo: nombrePersona	|persona nombre|	nombre := self traducirNombre: nombrePersona .	persona := listaDePersonas hallar: nombre .	persona esPersonaDeRiesgo.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:53'!agregarSintoma: unSintoma a: unaPersona	|nombrePersona nombreSintoma sintoma|	nombrePersona := self traducirNombre: unaPersona .	sintoma := Sintoma new .	nombreSintoma := self traducirNombre: unSintoma .	sintoma nombre: nombreSintoma .	listaDePersonas agregarSintoma: sintoma a: nombrePersona .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:56'!esPersonalEsencial: nombrePersona	|nombre|	nombre := self traducirNombre: nombrePersona .	listaDePersonas registrarComoEsencialA: nombre . ! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:56'!estaVacunadx: unNombre	|nombre|	nombre := self traducirNombre: unNombre .	listaDePersonas registrarVacunaA: nombre .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:57'!nuevoColegio: nombreInstitucion	|colegio nombre|	nombre := self traducirNombre: nombreInstitucion .	colegio := Colegio new .	colegio seLlama: nombre .	colegios agregar: colegio .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:57'!nuevaBurbuja: unaBurbuja	|nuevaBurbuja nombre|	nombre := self traducirNombre: unaBurbuja .	nuevaBurbuja := Burbuja new .	nuevaBurbuja etiquetarComo: nombre .	burbujas agregar: nuevaBurbuja .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:41'!agregarA: unaBurbuja alColegio: unColegio	|nombreBurbuja colegio nombreColegio|		nombreBurbuja := self traducirNombre: unaBurbuja .	nombreColegio := self traducirNombre:  unColegio .		colegio := colegios hallar: nombreColegio .	colegio agregar: (burbujas hallar: nombreBurbuja) .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:56'!clasesPresencialesEn: nombreColegio	|colegio nombre|	nombre := self traducirNombre: nombreColegio .	colegio := colegios hallar: nombre .	colegio verificarSituacionSanitaria .	^ colegio hayClasesPresenciales .! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 20:40'!agregarA: unaPersona aLaBurbuja: unaBurbuja	|nombrePersona burbuja nombreBurbuja|	nombrePersona := self traducirNombre:  unaPersona .	nombreBurbuja := self traducirNombre:  unaBurbuja .	burbuja := burbujas hallar: nombreBurbuja . 	burbuja agregar: (listaDePersonas hallar: nombrePersona) .! !Object subclass: #Burbuja	instanceVariableNames: 'nombre personas pinchada'	classVariableNames: ''	package: 'tp1-101284'!!Burbuja methodsFor: 'comparing' stamp: 'luciano 5/19/2021 08:38'!= otraBurbuja	^ nombre = otraBurbuja etiqueta .! !!Burbuja methodsFor: 'comparing' stamp: 'luciano 5/19/2021 08:38'!etiqueta 	^ nombre .! !!Burbuja methodsFor: 'accessing' stamp: 'luciano 5/21/2021 18:43'!chequearContagiados	personas obtenerContagiadxs cantidad > 0 ifFalse: [ ^ self ].	personas probablementeSeContagiaron.	pinchada := true .! !!Burbuja methodsFor: 'initialization' stamp: 'luciano 5/21/2021 19:00'!initialize 	personas := ListaPersonas new .	nombre := Nombre new .	pinchada := false . ! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 19:29'!agregar: persona	[personas agregar: persona ]	on: PersonaRepetidaError do: [ 		PersonaRepetidaError signal .		] ! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'luciano 5/19/2021 09:06'!estaPinchada	^ pinchada .! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'luciano 5/20/2021 21:02'!exploto"chequea si hay alguna persona en la burbuja que sea convid+.Si la hay, marca a las demás personas como sospechosxs y devuelve true (como funciona en la vida real).Si nadie se contagió, devuelve false"	self chequearContagiados .	^ pinchada .! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 03:31'!cantidadPersonas	^ personas cantidad .! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 19:00'!etiquetarComo: etiquetaBurbuja	nombre := etiquetaBurbuja. ! !Error subclass: #BurbujaInexistenteError	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!Error subclass: #BurbujaRepetidaError	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!Object subclass: #Colegio	instanceVariableNames: 'nombre burbujas presencialidad'	classVariableNames: ''	package: 'tp1-101284'!!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 00:08'!agregar: nuevaBurbuja	burbujas agregar: nuevaBurbuja .! !!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/20/2021 23:57'!seLlama: nombreColegio	nombre := nombreColegio .! !!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 00:36'!hayClasesPresenciales	^ presencialidad .	! !!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 04:17'!agregarA: unaPersona aLaBurbuja: unaBurbuja	|burbuja|	burbuja := burbujas hallar: unaBurbuja etiqueta .	burbuja agregar: unaPersona .! !!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 03:53'!cantidadBurbujas	^ burbujas cantidad .! !!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 00:52'!chequearPorcentajeBurbujasPinchadas	|porcentaje| 	[ porcentaje := self cantidadBurbujasPinchadas / burbujas cantidad ]	on: ZeroDivide do: [ porcentaje := 0 ] .	^ porcentaje .! !!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 04:07'!verificarSituacionSanitaria	presencialidad := self chequearPorcentajeBurbujasPinchadas < 0.4  .! !!Colegio methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 00:43'!cantidadBurbujasPinchadas	|cantidad|	cantidad := burbujas cantidadPinchadas .	^ cantidad .	! !!Colegio methodsFor: 'initialization' stamp: 'luciano 5/21/2021 00:20'!initialize 	burbujas := ListaBurbujas new .	presencialidad := true .! !!Colegio methodsFor: 'accessing' stamp: 'luciano 5/20/2021 23:50'!nombre 	^ nombre .! !!Colegio methodsFor: 'comparing' stamp: 'luciano 5/21/2021 19:44'!= otroColegio	^ nombre = otroColegio nombre .! !Error subclass: #ColegioInexistenteError	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!Object subclass: #CondicionSalud	instanceVariableNames: 'riesgo'	classVariableNames: ''	package: 'tp1-101284'!!CondicionSalud methodsFor: 'as yet unclassified' stamp: 'luciano 5/20/2021 23:26'!esDeRiesgo 	^ riesgo .! !!CondicionSalud methodsFor: 'initialization' stamp: 'luciano 5/20/2021 23:24'!initialize 	self subclassResponsibility .! !!CondicionSalud methodsFor: 'accessing' stamp: 'luciano 5/20/2021 23:29'!puedeCircular	^ riesgo not .! !Object subclass: #Estado	instanceVariableNames: 'condicionCovid'	classVariableNames: ''	package: 'tp1-101284'!!Estado methodsFor: 'initialization' stamp: 'luciano 5/20/2021 23:15'!initialize 	^ self subclassResponsibility .! !!Estado methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:46'!diagnostico	^ condicionCovid .! !!Estado methodsFor: 'accessing' stamp: 'luciano 5/20/2021 23:40'!puedeCircular 	self subclassResponsibility .! !Estado subclass: #Contagiadx	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!!Contagiadx methodsFor: 'initialization' stamp: 'luciano 5/21/2021 18:46'!initialize 	condicionCovid := 'Positivo' .! !!Contagiadx methodsFor: 'accessing' stamp: 'luciano 5/20/2021 23:40'!puedeCircular 	^ false .! !Estado subclass: #Defecto	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!!Defecto methodsFor: 'initialization' stamp: 'luciano 5/21/2021 18:47'!initialize	condicionCovid := 'Defecto' .! !!Defecto methodsFor: 'accessing' stamp: 'luciano 5/20/2021 23:40'!puedeCircular 	^ false .! !Error subclass: #ListaVaciaError	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!CondicionSalud subclass: #NoRiesgo	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!!NoRiesgo methodsFor: 'initialization' stamp: 'luciano 5/20/2021 23:25'!initialize 	riesgo := false .! !Object subclass: #Nombre	instanceVariableNames: 'cadena'	classVariableNames: ''	package: 'tp1-101284'!!Nombre methodsFor: 'comparing' stamp: 'luciano 5/21/2021 19:07'!cadena 	^ cadena asLowercase .! !!Nombre methodsFor: 'comparing' stamp: 'luciano 5/21/2021 19:35'!= otroNombre	^ cadena = otroNombre cadena .! !!Nombre methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:54'!asignar: nombre	cadena := nombre asLowercase .! !Object subclass: #Persona	instanceVariableNames: 'puedeCircular nombre sintomas estadoCovid situacionRiesgo trabajadorEsencial contactosEstrechos'	classVariableNames: ''	package: 'tp1-101284'!!Persona methodsFor: 'accesing' stamp: 'luciano 5/20/2021 08:33'!seJuntoCon: persona	contactosEstrechos agregar: persona .! !!Persona methodsFor: 'accessing' stamp: 'luciano 5/17/2021 05:32'!nombre	^ nombre .! !!Persona methodsFor: 'accessing' stamp: 'luciano 5/21/2021 15:31'!estadoTesteo	^ estadoCovid diagnostico.! !!Persona methodsFor: 'accessing' stamp: 'luciano 5/21/2021 15:31'!puedeCircular	^ situacionRiesgo puedeCircular & (		(estadoCovid puedeCircular) |		(trabajadorEsencial & (contactosEstrechos sinSospechosxs & contactosEstrechos sinContagiadxs))	 ).! !!Persona methodsFor: 'comparing' stamp: 'luciano 5/21/2021 19:55'!= otraPersona	^ nombre = otraPersona nombre .! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:39'!resultadoTestPositivo	^ (sintomas cantidad > 3) | ((sintomas cantidad > 2) & sintomas contieneAlgunoHabitual )! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:31'!esPositivx	^ estadoCovid diagnostico = 'Positivo' .! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 05:38'!esPersonaDeRiesgo	situacionRiesgo := Riesgo new.! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:39'!agregarSintoma: unSintoma	sintomas vacia ifTrue: [ 		self ahoraEsSospechosx .	].	sintomas agregar: unSintoma .	 	self resultadoTestPositivo	ifTrue: [ self seContagio ].	! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:31'!recibirVacuna 	estadoCovid := Vacunadx new .	! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/18/2021 19:21'!esEsencial: condicion	trabajadorEsencial := condicion.! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/18/2021 19:05'!esEsencial 	^ trabajadorEsencial .! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:31'!estaVacunadx	^ estadoCovid diagnostico = 'Vacunadx' .! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:33'!seContagio	estadoCovid := Contagiadx new .! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:31'!esSospechosx 	^ estadoCovid diagnostico = 'Sospechosx' .! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 15:35'!ahoraEsSospechosx	estadoCovid := Sospechosx new .! !!Persona methodsFor: 'as yet unclassified' stamp: 'luciano 5/18/2021 06:30'!contactosRecientes	^ contactosEstrechos .! !!Persona methodsFor: 'initialization' stamp: 'luciano 5/21/2021 18:59'!seLlama: unNombre	nombre := unNombre .	! !!Persona methodsFor: 'initialization' stamp: 'luciano 5/21/2021 18:59'!initialize	sintomas := ListaSintomas new .	nombre := Nombre new .	puedeCircular := false .	trabajadorEsencial := false .	estadoCovid := Defecto new .	situacionRiesgo := NoRiesgo new .	contactosEstrechos := ListaPersonas new .! !Error subclass: #PersonaInexistenteError	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!Error subclass: #PersonaRepetidaError	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!Object subclass: #PrimitivasConjunto	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!!PrimitivasConjunto methodsFor: 'accessing' stamp: 'luciano 5/21/2021 05:29'!agregar: objeto	self subclassResponsibility .! !!PrimitivasConjunto methodsFor: 'accessing' stamp: 'luciano 5/21/2021 05:29'!hallar: objeto	self subclassResponsibility .! !!PrimitivasConjunto methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 05:29'!cantidad	self subclassResponsibility .! !!PrimitivasConjunto methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 05:30'!vacia	self subclassResponsibility .! !PrimitivasConjunto subclass: #ListaBurbujas	instanceVariableNames: 'burbujas'	classVariableNames: ''	package: 'tp1-101284'!!ListaBurbujas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 19:29'!agregar: nuevaBurbuja	burbujas isEmpty ifTrue: [ burbujas add: nuevaBurbuja ]		ifFalse: [ 			(burbujas anySatisfy: [ :burbuja| 			burbuja etiqueta = nuevaBurbuja etiqueta ]) ifTrue: [ BurbujaRepetidaError signal ]			ifFalse: [ burbujas add: nuevaBurbuja ] .		]! !!ListaBurbujas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 03:59'!cantidadPinchadas	|cantidad|	burbujas isEmpty ifTrue: [ ^ 0 ] .	cantidad := 0 .	burbujas do: [ :burbuja |		burbuja estaPinchada ifTrue: [ 			cantidad := cantidad + 1 ]	].	^ cantidad .! !!ListaBurbujas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:56'!hallar: etiquetaBurbuja	|buscada|	burbujas isEmpty 		ifTrue: [ ListaVaciaError signal ] 		ifFalse: [  			buscada := burbujas detect: [ :burbuja | 			burbuja etiqueta = etiquetaBurbuja  ] ifNone: [ BurbujaInexistenteError signal ].		^ buscada .		].! !!ListaBurbujas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 21:01'!agregarA: persona aLaBurbuja: etiquetaBurbuja	|burbuja nombre|	nombre:= Nombre new .	nombre asignar: etiquetaBurbuja .	burbuja := self hallar: nombre .	burbuja agregar: persona . ! !!ListaBurbujas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 00:31'!cantidad 		^ burbujas size .! !!ListaBurbujas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 00:05'!vacia 		^ burbujas isEmpty .! !!ListaBurbujas methodsFor: 'initialization' stamp: 'luciano 5/20/2021 08:26'!initialize 	burbujas := OrderedCollection new .! !PrimitivasConjunto subclass: #ListaColegios	instanceVariableNames: 'colegios'	classVariableNames: ''	package: 'tp1-101284'!!ListaColegios methodsFor: 'initialization' stamp: 'luciano 5/20/2021 21:14'!initialize 	colegios := OrderedCollection new .! !!ListaColegios methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 19:49'!hallar: nombreColegio	| buscado |	colegios isEmpty 		ifTrue: [ ListaVaciaError signal ] 		ifFalse: [  			buscado := colegios detect: [ :colegio | 			colegio nombre = nombreColegio ] ifNone: [ ColegioInexistenteError signal ] .			^ buscado .		].! !!ListaColegios methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 00:05'!vacia 		^ colegios isEmpty .! !!ListaColegios methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 05:36'!cantidad 		^ colegios size .! !!ListaColegios methodsFor: 'accessing' stamp: 'luciano 5/21/2021 19:44'!agregar: unColegio		colegios isEmpty ifTrue: [ colegios add: unColegio ] 		ifFalse: [ (colegios anySatisfy: [ :colegio|				colegio = unColegio ]) ifTrue: [ SintomaRepetidoError signal ]			 ifFalse: [colegios  add: unColegio ].		 ]	! !PrimitivasConjunto subclass: #ListaPersonas	instanceVariableNames: 'conjuntoDePersonas'	classVariableNames: ''	package: 'tp1-101284'!!ListaPersonas methodsFor: 'accessing' stamp: 'luciano 5/21/2021 06:58'!agregar: unaPersona	conjuntoDePersonas isEmpty ifTrue: [ conjuntoDePersonas add: unaPersona ]		ifFalse: [ 			(conjuntoDePersonas anySatisfy: [ :persona | 			persona nombre = unaPersona nombre ]) ifTrue: [ PersonaRepetidaError signal ]			ifFalse: [ conjuntoDePersonas add: unaPersona ] 			].! !!ListaPersonas methodsFor: 'accessing' stamp: 'luciano 5/21/2021 18:56'!hallar: nombrePersona	| personaBuscada |	conjuntoDePersonas isEmpty 		ifTrue: [ ListaVaciaError signal ] 		ifFalse: [  			personaBuscada := conjuntoDePersonas detect: [ :persona | 			persona nombre = nombrePersona ] ifNone: [ PersonaInexistenteError signal ].		^ personaBuscada .		].! !!ListaPersonas methodsFor: 'initialization' stamp: 'luciano 5/20/2021 08:27'!initialize 	conjuntoDePersonas := OrderedCollection new .! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/20/2021 08:27'!probablementeSeContagiaron	conjuntoDePersonas do: [ :persona |		persona ahoraEsSospechosx ] .! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:02'!sinSospechosxs	^ (self obtenerSospechosxs) vacia.	! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:03'!obtenerSospechosxs	|sospechosxs|	sospechosxs := ListaPersonas new .	conjuntoDePersonas do: [ :persona |		persona esSospechosx ifTrue: [ sospechosxs agregar: persona ] 	] .	^ sospechosxs .! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:04'!obtenerContagiadxs	|contagiadxs|	contagiadxs := ListaPersonas new .	conjuntoDePersonas do: [ :persona |		persona esPositivx ifTrue: [ contagiadxs agregar: persona ] 	] .	^ contagiadxs .! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:55'!agregarSintoma: unSintoma a: nombreContagiadx	conjuntoDePersonas isEmpty 		ifTrue: [ ListaVaciaError signal ] 		ifFalse: [  			|hallada|			hallada := false .			conjuntoDePersonas do: [ : persona  |				 nombreContagiadx  = persona nombre 					ifTrue: [ persona agregarSintoma: unSintoma.						hallada := true ]			].			hallada ifFalse: [PersonaInexistenteError signal ] . 		]	! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/20/2021 08:32'!vacia	^ conjuntoDePersonas isEmpty .! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:01'!sinContagiadxs	^ (self obtenerContagiadxs) vacia .! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 18:17'!registrarVacunaA: unNombre	|persona|	persona := self hallar: unNombre .	persona recibirVacuna .! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 05:42'!estadoDe: nombrePersona	|persona|	persona := self hallar: nombrePersona .	^ persona estadoTesteo . 		! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 19:21'!registrarComoEsencialA: nombrePersona	|persona |"nombre|	nombre := Nombre new .	nombre asignar: nombrePersona "	persona := self hallar: nombrePersona .	persona esEsencial: true .	! !!ListaPersonas methodsFor: 'as yet unclassified' stamp: 'luciano 5/20/2021 08:36'!cantidad	^ conjuntoDePersonas size .! !PrimitivasConjunto subclass: #ListaSintomas	instanceVariableNames: 'sintomas'	classVariableNames: 'habitual1 habitual2 habitual3 habituales nombreH1 nombreH2 nombreH3'	package: 'tp1-101284'!!ListaSintomas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 14:39'!agregar: unSintoma	sintomas isEmpty ifTrue: [ sintomas add: unSintoma ] 		ifFalse: [ (sintomas anySatisfy: [ :sintoma|				sintoma = unSintoma ]) ifTrue: [ SintomaRepetidoError signal ]			 ifFalse: [sintomas add: unSintoma ].		 ]! !!ListaSintomas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 01:56'!contieneAlgunoHabitual	^ sintomas anySatisfy: [ :sintoma |		habituales includes: sintoma ] .! !!ListaSintomas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 05:36'!cantidad 	^ sintomas size .! !!ListaSintomas methodsFor: 'as yet unclassified' stamp: 'luciano 5/21/2021 01:22'!vacia	^ sintomas isEmpty .! !!ListaSintomas methodsFor: 'initialization' stamp: 'luciano 5/21/2021 20:58'!initialize	sintomas := OrderedCollection new .	habituales := OrderedCollection new .	habitual1 := Sintoma new .	habitual2 := Sintoma new .	habitual3 := Sintoma new .		nombreH1 := Nombre new .	nombreH1 asignar: 'fiebre' .	nombreH2 := Nombre new .	nombreH2 asignar: 'tos' .	nombreH3 := Nombre new .	nombreH3 asignar: 'cansancio' .		habitual1 nombre: nombreH1  .	habitual2 nombre: nombreH2  .	habitual3 nombre: nombreH3  .	habituales add: habitual1 .	habituales add: habitual2  .	habituales add: habitual3.! !!ListaSintomas methodsFor: 'accessing' stamp: 'luciano 5/21/2021 14:22'!hallar: nombreSintoma	|buscado|	sintomas isEmpty 		ifTrue: [ ListaVaciaError signal ] 		ifFalse: [  			buscado := sintomas detect: [ :sintoma | 			sintoma nombre = nombreSintoma asLowercase ] ifNone: [ SintomaNoEncontrado signal ].		^ buscado .		].! !CondicionSalud subclass: #Riesgo	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!!Riesgo methodsFor: 'initialization' stamp: 'luciano 5/20/2021 23:39'!initialize 	riesgo := true .! !Object subclass: #Sintoma	instanceVariableNames: 'nombre'	classVariableNames: ''	package: 'tp1-101284'!!Sintoma methodsFor: 'accessing' stamp: 'luciano 5/21/2021 19:36'!nombre: nombreSintoma	nombre := nombreSintoma .	! !!Sintoma methodsFor: 'accessing' stamp: 'luciano 5/21/2021 20:50'!nombre 	^ nombre .! !!Sintoma methodsFor: 'comparing' stamp: 'luciano 5/21/2021 20:49'!= otroSintoma	^ nombre  = otroSintoma nombre .	! !!Sintoma methodsFor: 'initialization' stamp: 'luciano 5/21/2021 18:59'!initialize 	nombre := Nombre new .! !Error subclass: #SintomaNoEncontrado	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!Error subclass: #SintomaRepetidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!Estado subclass: #Sospechosx	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!!Sospechosx methodsFor: 'accessing' stamp: 'luciano 5/20/2021 23:40'!puedeCircular 	^ false .! !!Sospechosx methodsFor: 'initialization' stamp: 'luciano 5/21/2021 18:47'!initialize 	condicionCovid := 'Sospechosx' .! !Estado subclass: #Vacunadx	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1-101284'!!Vacunadx methodsFor: 'accessing' stamp: 'luciano 5/20/2021 23:41'!puedeCircular	^ true .! !!Vacunadx methodsFor: 'initialization' stamp: 'luciano 5/21/2021 18:47'!initialize 	condicionCovid := 'Vacunadx'.! !